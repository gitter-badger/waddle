program :=
    functionDecl*

functionDecl :=
    voidFuction
    returnFunction

voidFuction :=
    FUNCTION IDENT LPAREN parameterList RPAREN block

returnFunction :=
    FUNCTION IDENT LPAREN parameterList RPAREN ARROW type block

block :=
    LBRACE statement* RBRACE

parameterList :=
    parameterDef [0..1] (",", parameterDef)*

parameterDef :=
    nameDef COLON type

nameDef :=
    (a-z,A-Z,_,1-9)[1..*]

statement :=
    printStmt
    returnStmt
    assignStmt
    forStmt
    bindingStmt
    varDeclStmt
    ifStmt
    matchStmt
    pushStmnt
    lengthStmt

printStmt:=
    PRINT LPAREN STRING RPAREN

returnStmt:=
    RETURN (returnFunction | varDeclStmt | nameDef)

assignStmt :=
    IDENTIFIER EQ expression

forStmt :=
    FOR LPAREN iterationDef RPAREN block

iterationDef :=
    varDeclStmt SEMICOLON relationalExpr SEMICOLON assignStmt

expression :=
    relationalExpr (conditionalOp relationalExpr)*

conditionalOp :=
    AND
    OR

relationalExpr :=
    termExpr (relationalOp termExpr)?

relationalOp :=
    LT
    GT
    LE
    EQ
    ...

...

atom :=
    ARROW
    COLON
    SEMICOLON
    IDENTIFIER
    STRING
    NUMBER
    ...