program :=
    functionDecl* EOF

functionDecl :=
    FUNCTION IDENTIFIER LPAREN parameterList? RPAREN (ARROW type)? block

parameterList :=
    parameter (COMMA parameter)*

block :=
    LBRACE statement* RBRACE

parameter :=
    IDENTIFIER COLON type

statement :=
    returnStmt SEMICOLON
    ifStmt
    assignStmt SEMICOLON
    printStmt SEMICOLON
    declStmt SEMICOLON
    invocationStmt SEMICOLON

returnStmt :=
    RETURN expression

ifStmt :=
    IF expression BLOCK

assignStmt :=
    IDENTIFIER EQUAL expression

declStmt :=
    VAR parameter EQUAL expression

printStmt :=
    PRINT LPAREN argumentList? RPAREN

invocationStmt :=
    invocationExpression

expression :=
    logicalOrExpression 

logicalOrExpression :=
    logicalAndExpression (OR logicalAndExpression)* 

logicalAndExpression :=
    relationalExpression (AND relationalExpression)* 

relationalExpression :=
    termExpression (relationalOperator termExpression)?

relationalOperator :=
    EQ
    NE
    LT
    GT

termExpression :=
    productExpression (termOperation productExpression)*

termOperation :=
    PLUS
    MINUS

productExpression :=
    atom (productOperation atom)*

productOperation :=
    MULTIPLY
    DIVIDE


atom :=
    invocationExpression
    NUMBER
    IDENTIFIER

invocationExpression :=
    ARROW IDENTIFIER LPAREN argumentList? RPAREN

argumentList :=
    expression (COMMA expression)*
